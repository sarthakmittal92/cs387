You can submit either a text file, or a .odt/.docx/.pdf file. For each case, submit

- a query
- the chosen plan
- your reasoning behind constructing the query (briefly)
- any other information that is asked for in that part, such as an explanation for what you
observed.

Use the PostgreSQL functions explain <query>, and explain analyze <query> to find the query
plan and the execution statistics where required below.

Before you start on this assignment, set up the large database and try out the sample queries
as explained on Moodle. 

1. Create a query where PostgreSQL uses bitmap index scan on relation takes. Explain why
PostgreSQL may have chosen this plan.

2. Create a selection query with an AND of two predicates, whose chosen plan uses an index
scan on one of the predicates. You can create indices on appropriate relation attributes to
create such a case.

3. Create a selection query with an OR of two predicates, whose chosen plan uses an index scan
on atleast one or both of the predicates.  You can create indices on appropriate relation
attributes to create such a case.

4. Create a query where PostgreSQL chooses a (plain) index nested loops join (NOTE: PostgreSQL
uses nested loops join even for indexed nested loops join.  The nested loops operator has 2
children. The first child is the outer input, and it may have an index scan or anything else,
that is irrelevant. The second child must have an index scan or bitmap index scan, using an
attribute from the first child.)

5. Create an index as below, and see the time taken to create the index:
    create index i1 on takes(id, semester, year);
Similarly see how long it takes to drop the above index using:
    drop index i1;

6. Create an empty table takes2 with the same schema and data as takes but no primary keys or
foreign keys. Find how long it takes the execute the query
    insert into takes2 select * from takes;
Also, find the query plan for the above insert statement.

7. Next measure the time it takes to modify takes2 by using alter table to add the primary key
constraint.

8. Next drop the table takes2 (and its rows, as a result), and create it again, but this time
with a primary key. Run the insert again and measure how long it takes to run. Give its query
plan, and explain why the time taken is different this time. Compare the time taken with the
sum of the times for the previous two parts of the question. What do you conclude from the
above?

9. Create a query where PostgreSQL chooses a merge join (hint: use an order by clause)

10. Add a LIMIT 10 ROWS clause at the end of the previous query, and see what algorithm method
is used. (LIMIT n ensures only n rows are output.) Explain what happened, if the join
algorithm changes; if the plan does not change, create a different query where the join
algorithm changes as a result of adding the LIMIT clause.

11. Create an aggregation query where PostgreSQL uses (in-memory) hash-aggregation.

12. Create an aggregation query where PostgreSQL uses sort-based aggregation
