                                    Transactions

1. After delete, the entry was not selected by the subsequent select query, but after rollback,
the select query worked as earlier. This is because of using 'begin', which told Postgres not to
commit the executed queries until told to do so. Hence on rollback, all queries executed after
'begin' are reverted, due to which select works.

                                    Concurrency

1. Due to the 'begin' command, the executed queries are not committed to the database and
so the Postgres connection reads directly from the database snapshot that was before the
'begin' and also considers queries executed within the 'begin'. After the commit, the
snapshot gets updated, and hence both connections show the same output.

2. The second window hanged on the update command because both the connections wanted to
update values, so the second window (with the later update) waits for the first window
(earlier update) to get committed. Though after the commit, the second window reads the
snapshot that it had in its 'begin' block, and runs an update query using that value. Due to
this the updated value is 55 + 20 = 75 instead of 44 + 20 = 64.

3. In this case, due to the serialization mode, the second window update stops, and when the
first window executes commit, the update results in an error due to concurrent updates which
are not allowed by serialization. After this, a commit in the second window results in a
rollback of the block because of the error. Due to this, the select query results in output
of 44 instead of 64 because of the update from the first window.

4. Due to conflict between update of one window and select of the other window, the second
window first waits for the commit by the first window, and after the commit, it is unable
to execute its own update because it wants to write to a tuple which was read by the first
window during its update. Due to 'update ... select' not being atomic, the change of the select
tuple causes an error because the read occurs before the write, and the serializer catches
this dependency. This causes the commit to fail. Upon retry, the select and update get executed
because the dependency is not violated, and there is no other commit to interrupt the non-atomic
query.
